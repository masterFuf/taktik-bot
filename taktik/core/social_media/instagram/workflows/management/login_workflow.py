"""
Workflow de login Instagram.

Ce module orchestre le processus complet de connexion √† Instagram,
incluant la gestion des erreurs, des popups et de la persistance de session.
"""

from typing import Optional, Dict, Any
from loguru import logger

from ...auth.login import InstagramLogin, LoginResult
from ...auth.session_manager import SessionManager
from ..helpers.workflow_helpers import WorkflowHelpers


class LoginWorkflow:
    """Workflow complet de connexion Instagram."""
    
    def __init__(self, device, device_id: str):
        """
        Initialise le workflow de login.
        
        Args:
            device: Instance du device (uiautomator2)
            device_id: ID du device (ADB ID)
        """
        self.device = device
        self.device_id = device_id
        self.logger = logger.bind(module="instagram-login-workflow")
        
        # Composants
        self.login_manager = InstagramLogin(device, device_id)
        self.session_manager = SessionManager()
        self.helpers = WorkflowHelpers(device)
    
    def execute(
        self,
        username: str,
        password: str,
        max_retries: int = 3,
        save_session: bool = True,
        use_saved_session: bool = True,
        save_login_info_instagram: bool = False
    ) -> Dict[str, Any]:
        """
        Ex√©cute le workflow de login complet.
        
        Args:
            username: Nom d'utilisateur, email ou num√©ro de t√©l√©phone
            password: Mot de passe
            max_retries: Nombre maximum de tentatives en cas d'√©chec
            save_session: Sauvegarder la session apr√®s connexion r√©ussie (notre syst√®me)
            use_saved_session: Tenter d'utiliser une session sauvegard√©e (notre syst√®me)
            save_login_info_instagram: Sauvegarder les infos dans Instagram (popup Instagram)
            
        Returns:
            Dictionnaire avec le r√©sultat du workflow:
            {
                'success': bool,
                'message': str,
                'username': str,
                'attempts': int,
                'session_saved': bool,
                'error_type': Optional[str]
            }
        """
        self.logger.info(f"üöÄ Starting login workflow for {username}")
        
        result = {
            'success': False,
            'message': '',
            'username': username,
            'attempts': 0,
            'session_saved': False,
            'error_type': None
        }
        
        # Tentatives de connexion
        for attempt in range(1, max_retries + 1):
            result['attempts'] = attempt
            
            self.logger.info(f"üîÑ Login attempt {attempt}/{max_retries}")
            
            # Tenter la connexion
            login_result = self.login_manager.login(
                username=username,
                password=password,
                save_session=save_session,
                use_saved_session=(use_saved_session and attempt == 1),
                save_login_info_instagram=save_login_info_instagram
            )
            
            # Analyser le r√©sultat
            if login_result.success:
                result['success'] = True
                result['message'] = login_result.message
                result['session_saved'] = save_session
                
                self.logger.success(f"‚úÖ Login successful for {username}")
                break
            
            # G√©rer les erreurs sp√©cifiques
            result['error_type'] = login_result.error_type
            result['message'] = login_result.message
            
            if login_result.requires_2fa:
                self.logger.warning("üîê 2FA required - stopping attempts")
                result['message'] = "2FA required (not yet implemented)"
                break
            
            if login_result.error_type == "credentials_error":
                self.logger.error("‚ùå Invalid credentials - stopping attempts")
                break
            
            if login_result.error_type == "suspicious_login":
                self.logger.warning("‚ö†Ô∏è Suspicious login - stopping attempts")
                break
            
            # Attendre avant la prochaine tentative
            if attempt < max_retries:
                self.logger.info(f"‚è≥ Waiting before retry...")
                import time
                time.sleep(3)
        
        # Log final
        if result['success']:
            self.logger.success(f"‚úÖ Login workflow completed successfully for {username}")
        else:
            self.logger.error(
                f"‚ùå Login workflow failed for {username} after {result['attempts']} attempt(s): "
                f"{result['message']}"
            )
        
        return result
    
    def check_existing_session(self, username: str) -> Optional[Dict]:
        """
        V√©rifie si une session existe pour cet utilisateur.
        
        Args:
            username: Nom d'utilisateur Instagram
            
        Returns:
            Donn√©es de session si trouv√©es, None sinon
        """
        return self.session_manager.load_session(username, self.device_id)
    
    def logout_and_clear_session(self, username: str) -> bool:
        """
        D√©connecte l'utilisateur et supprime la session sauvegard√©e.
        
        Args:
            username: Nom d'utilisateur Instagram
            
        Returns:
            True si succ√®s, False sinon
        """
        self.logger.info(f"üîì Logging out {username}...")
        
        # TODO: Impl√©menter la d√©connexion via l'UI Instagram
        # Pour l'instant, on supprime juste la session
        
        success = self.session_manager.delete_session(username, self.device_id)
        
        if success:
            self.logger.success(f"‚úÖ Session cleared for {username}")
        else:
            self.logger.error(f"‚ùå Failed to clear session for {username}")
        
        return success
    
    def list_saved_sessions(self) -> list:
        """
        Liste toutes les sessions sauvegard√©es pour ce device.
        
        Returns:
            Liste des sessions avec leurs m√©tadonn√©es
        """
        all_sessions = self.session_manager.list_sessions()
        
        # Filtrer par device_id
        device_sessions = [
            s for s in all_sessions 
            if s.get('device_id') == self.device_id
        ]
        
        return device_sessions
